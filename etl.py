# -*- coding: utf-8 -*-
"""ETL

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ViDZjLsNsNhbcs81iEBfFiXvwjCHPJkB
"""

import glob
import pandas as pd
from datetime import datetime

!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Lab%20-%20Extract%20Transform%20Load/data/bank_market_cap_1.json
!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Lab%20-%20Extract%20Transform%20Load/data/bank_market_cap_2.json
!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Final%20Assignment/exchange_rates.csv

def extract_from_json(file_to_process):
    dataframe = pd.read_json(file_to_process)
    return dataframe

columns=['Name','Market Cap (US$ Billion)']

def extract():
    df = extract_from_json('bank_market_cap_1.json')
    df.columns = columns
    return df

data = pd.read_csv('exchange_rates.csv',index_col=0)
data = data.loc['GBP']
print(data)

df = pd.read_csv("exchange_rates.csv", index_col=0)
df = df.loc["GBP"]

exchange_rate = df["Rates"]
print(exchange_rate)

def convert(n, data):
    n['Market Cap (GBP$ Billion)'] = n['Market Cap (US$ Billion)']
    n['Market Cap (GBP$ Billion)']*=data['Rates'].tolist()
    n.drop('Market Cap (US$ Billion)',axis=1, inplace=True)
    return n

def log(message):
    timestamp_format = '%H:%M:%S-%h-%d-%Y' 
    now = datetime.now() 
    timestamp = now.strftime(timestamp_format)
    with open("dealership_logfile.txt","a") as f:
        f.write(timestamp + ',' + message + '\n')

df = extract()
df.head()

extracted_data = extract()
extracted_data.head()

def transform(data):
    data["Market Cap (US$ Billion)"] = round(data["Market Cap (US$ Billion)"] * exchange_rate, 3)
    data = data.rename(columns = {"Market Cap (US$ Billion)" : "Market Cap (GBP$ Billion)"}, inplace = False)
    return data

def load(data,target):  
    data.to_csv(target)

log("Transform phase Started")
transformed_data = transform(extracted_data)
transformed_data.head()

log("Transform phase Ended")

def load(data): 
  log("Load phase Started")
  data.to_csv('bank_market_cap_gbp.csv')
  load(transformed_data,"bank_market_cap_gbp.csv")

log("Load phase Ended")